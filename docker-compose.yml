services:
  # ============================================
  # PostgreSQL Database Service
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: adl_postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-adl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-adl_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-adl_user} -d ${POSTGRES_DB:-adl_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
    networks:
      - adl_network

  # ============================================
  # FastAPI Backend Service
  # ============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    
    image: adl-backend:latest
    container_name: adl_backend
    restart: unless-stopped
    
    # Wait for postgres to be healthy before starting
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      # Application settings
      PROJECT_NAME: ${PROJECT_NAME:-ADL Production}
      DEBUG: ${DEBUG:-False}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      VERSION: ${VERSION:-1.0.0}
      
      # Database connection
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-adl_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-adl_db}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-please-change-this-secret-key-in-production}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # SMTP Email (configure these in .env)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-noreply@adl.com}
    
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount .env file (optional, prefer environment variables)
      - ./.env:/app/.env:ro
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - adl_network
    
    # Run migrations on startup, then start the app
    command: >
      sh -c "
        echo '⏳ Waiting for database...' &&
        sleep 5 &&
        echo '🔄 Running database migrations...' &&
        alembic upgrade head &&
        echo '✅ Migrations complete!' &&
        echo '🚀 Starting FastAPI server...' &&
        uvicorn backend.app.main:app --host 0.0.0.0 --port 8000
      "

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
    name: adl_postgres_data

# ============================================
# Networks
# ============================================
networks:
  adl_network:
    driver: bridge
    name: adl_network