from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from sqlalchemy.orm import Session
from pydantic import BaseModel, EmailStr
from datetime import datetime

from backend.app.db.session import get_session as get_db
from backend.app.models.user import User
from backend.app.models.password_reset import PasswordResetToken
from backend.app.services.email_service import email_service
from backend.app.core.security import hash_password

router = APIRouter()


class ForgotPasswordRequest(BaseModel):
    email: EmailStr


class ResetPasswordRequest(BaseModel):
    token: str
    new_password: str


class TestEmailRequest(BaseModel):
    to_email: EmailStr


@router.post("/forgot-password")
async def forgot_password(
    request: ForgotPasswordRequest,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """Request password reset email"""
    user = db.query(User).filter(User.email == request.email).first()
    
    if not user:
        # Don't reveal if user exists
        return {"message": "If the email exists, a reset link will be sent"}
    
    # Create reset token
    reset_token = PasswordResetToken.create_token(user.id)
    db.add(reset_token)
    db.commit()
    
    # Send email in background
    background_tasks.add_task(
        email_service.send_password_reset_email,
        user.email,
        user.username,
        reset_token.token
    )
    
    return {"message": "If the email exists, a reset link will be sent"}


@router.post("/reset-password")
async def reset_password(
    request: ResetPasswordRequest,
    db: Session = Depends(get_db)
):
    """Reset password using token"""
    reset_token = db.query(PasswordResetToken).filter(
        PasswordResetToken.token == request.token,
        PasswordResetToken.is_used == False
    ).first()
    
    if not reset_token:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid or expired token"
        )
    
    if reset_token.is_expired():
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Token has expired"
        )
    
    # Get user and update password
    user = db.query(User).filter(User.id == reset_token.user_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    user.password = hash_password(request.new_password)
    reset_token.is_used = True
    db.commit()
    
    return {"message": "Password reset successful"}


@router.post("/test-email")
async def test_email(
    request: TestEmailRequest,
    background_tasks: BackgroundTasks
):
    """Test email configuration"""
    background_tasks.add_task(
        email_service.send_password_reset_email,
        request.to_email,
        "Test User",
        "test-token-123"
    )
    
    return {"message": "Test email sent"}
